# MAGport Snakefile
# Orchestrates modular MAG characterization

import os
from pathlib import Path

configfile: "config/config.yaml"

# CLI-provided config keys (with defaults):
INPUT_DIR = Path(config.get("input_dir", "input")).resolve()
OUTPUT_DIR = Path(config.get("output_dir", "results")).resolve()
EXT = config.get("file_extension", ".fasta")
THREADS = int(config.get("threads", 8))
MODULES = set((config.get("modules", "stats,quality,park,gunc,rrna,trna,orfs,gtdb,rrna16S,mimag").split(',')))
USE_CHECKM = config.get("use_checkm", "checkm2")

# Database download paths (for magport download command)
DB_BASE = Path(config.get("db_base", OUTPUT_DIR / "databases"))
config.setdefault("checkm2_download_path", str(DB_BASE / "checkm2_db"))
config.setdefault("gunc_download_path", str(DB_BASE / "gunc_db"))
config.setdefault("gtdb_download_path", str(DB_BASE / "gtdbtk"))
config.setdefault("ncbi16s_download_path", str(DB_BASE / "ncbi_16s"))

# Get directory paths from config
def get_dir(key: str, default: str) -> Path:
    """Get directory path from config, with default fallback
    Args:
        key: The key in config.directories
        default: Default path relative to output_dir if not configured
    Example:
        get_dir("seqkit", "01_stats/seqkit") might return Path("/path/to/output/01_stats/seqkit")
    """
    return OUTPUT_DIR / config.get("directories", {}).get(key, default)

# Module output directories
SEQKIT_DIR = get_dir("seqkit", "01_stats/seqkit")
ORF_DIR = get_dir("orfs", "02_genes/orfs")
RRNA_DIR = get_dir("rrna", "02_genes/rrna")
TRNA_DIR = get_dir("trna", "02_genes/trna")
QUALITY_DIR = get_dir("checkm", "03_quality/checkm")
GUNC_DIR = get_dir("gunc", "03_quality/gunc")
PARK_DIR = get_dir("park", "03_quality/park")
MIMAG_DIR = get_dir("mimag", "03_quality/mimag")
GTDB_DIR = get_dir("gtdbtk", "04_taxonomy/gtdbtk")
R16_DIR = get_dir("r16s", "04_taxonomy/16S")
LOGS = get_dir("logs", "logs")
BENCHMARKS = get_dir("benchmarks", "benchmarks")

# output files
SUMMARY_TSV = OUTPUT_DIR / config.get("output_files", {}).get("summary", "MAGport_summary.tsv")
REPORT_HTML = OUTPUT_DIR / config.get("output_files", {}).get("report", "MAGport_report.html")

# Get database paths from environment variables or config
def get_db_path(config_key: str, env_var: str, default: str) -> Path:
    return Path(
        os.environ.get(env_var) or 
        config.get(config_key) or 
        str(OUTPUT_DIR / default)
    ).resolve()

# Databases with env var fallbacks
CHECKM2_DB = get_db_path("checkm2_db_dir", "CHECKM2_DB_PATH", "resources/checkm2_db")
CHECKM1_DB = get_db_path("checkm1_db_dir", "CHECKM1_DB_PATH", "resources/checkm1_db")
GUNC_DB = get_db_path("gunc_db_dir", "GUNC_DB_PATH", "resources/gunc_db")
NCBI16S_DIR = get_db_path("ncbi16s_dir", "NCBI16S_DB_PATH", "resources/ncbi_16s")
GTDBTK_DB = get_db_path("gtdbtk_db_dir", "GTDBTK_DB_PATH", "resources/gtdbtk")

# Verify databases before workflow starts
# Import database verification function

# Get workflow directory (directory containing the Snakefile)
workflow.workflow_dir = os.path.dirname(workflow.snakefile)

verify_all_databases = None
db_rule_path = os.path.join(workflow.workflow_dir, "rules", "databases.smk")
with open(db_rule_path, 'rt') as f:
    exec(compile(f.read(), db_rule_path, 'exec'))

onstart:
    try:
        if verify_all_databases:
            verify_all_databases()
    except ValueError as e:
        print(f"[MAGport] Error: {e}")
        sys.exit(1)

# Discover MAGs
MAGS = sorted([str(p) for p in INPUT_DIR.glob(f"**/*{EXT}")])  # e.g. ['/path/to/MAG1.fasta', '/path/to/MAG2.fasta', ...]
SAMPLES = {Path(p).stem: str(Path(p).resolve()) for p in MAGS}  # e.g. {'MAG1': '/path/to/MAG1.fasta', ...}
SAMPLE_LIST = sorted(SAMPLES.keys())  # e.g. ['MAG1', 'MAG2', ...]

if not MAGS:
    print(f"[MAGport] No MAGs found in {INPUT_DIR} with extension {EXT}. The workflow will not proceed.")
    sys.exit(1)


# Targets
def per_mag_outputs(module: str):
    outs = []
    if module == "stats":
        outs = [get_dir("seqkit", "01_stats/seqkit")/(s+".seqkit.tsv") for s in SAMPLE_LIST]
    elif module == "quality":
        if USE_CHECKM == "checkm2":
            outs = [get_dir("checkm", "03_quality/checkm")/"checkm2_summary.tsv"]
        else:
            outs = [get_dir("checkm", "03_quality/checkm")/"checkm1_summary.tsv"]
    elif module == "park":
        outs = [get_dir("park", "03_quality/park")/(s+".park.tsv") for s in SAMPLE_LIST]
    elif module == "gunc":
        outs = [get_dir("gunc", "03_quality/gunc")/"GUNC_summary.tsv"]
    elif module == "rrna":
        outs = ([get_dir("rrna", "02_genes/rrna")/(s+".rRNA.tsv") for s in SAMPLE_LIST] +
                [get_dir("rrna", "02_genes/rrna")/(s+".16S.fasta") for s in SAMPLE_LIST])
    elif module == "trna":
        outs = [get_dir("trna", "02_genes/trna")/(s+".tRNA.tsv") for s in SAMPLE_LIST]
    elif module == "orfs":
        outs = [get_dir("orfs", "02_genes/orfs")/(s+".orfs.tsv") for s in SAMPLE_LIST]
    elif module == "gtdb":
        outs = [get_dir("gtdbtk", "04_taxonomy/gtdbtk")/"gtdb.merged_summary.tsv"]
    elif module == "rrna16S":
        outs = [get_dir("r16s", "04_taxonomy/16S")/(s+".16S.tsv") for s in SAMPLE_LIST]
    elif module == "mimag":
        outs = [get_dir("mimag", "03_quality/mimag")/(s+".MIMAG_level.tsv") for s in SAMPLE_LIST]
    return outs

SELECTED = [m for m in [
    "stats","quality","park","gunc","rrna","trna","orfs","gtdb","rrna16S","mimag"
] if m in MODULES]

# Build target outputs based on selected modules
def get_all_targets():
    """
    Get all target file paths for the workflow.
    Example:
        If MODULES includes "stats" and "gtdb", this might return:
        [
            "/path/to/output/01_stats/seqkit/MAG1.seqkit.tsv",
            "/path/to/output/01_stats/seqkit/MAG2.seqkit.tsv",
            "/path/to/output/04_taxonomy/gtdbtk/gtdb.merged_summary.tsv",
            "/path/to/output/MAGport_summary.tsv",
            "/path/to/output/MAGport_report.html"
        ]

    """
    targets = []
    for m in SELECTED:
        targets.extend(str(p) for p in per_mag_outputs(m))
    targets.extend([str(SUMMARY_TSV), str(REPORT_HTML)])
    return targets

rule all:
    input:
        get_all_targets()


# Get workflow directory (directory containing the Snakefile)
workflow.workflow_dir = os.path.dirname(workflow.snakefile)

# Envs (paths relative to workflow directory)
ENV = {k: os.path.join(workflow.workflow_dir, "envs", f"{k}.yaml") for k in [
    "seqkit",
    "checkm2",
    "checkm1",
    "blast",
    "gunc",
    "barrnap",
    "trnascan",
    "prodigal",
    "gtdbtk",
    "diamond",
    "python"
]}


# Include rules using absolute paths
import os
include: os.path.join(workflow.workflow_dir, "rules", "databases.smk")
include: os.path.join(workflow.workflow_dir, "rules", "stats.smk")
include: os.path.join(workflow.workflow_dir, "rules", "checkm.smk")
include: os.path.join(workflow.workflow_dir, "rules", "park.smk")
include: os.path.join(workflow.workflow_dir, "rules", "gunc.smk")
include: os.path.join(workflow.workflow_dir, "rules", "rrna.smk")
include: os.path.join(workflow.workflow_dir, "rules", "trna.smk")
include: os.path.join(workflow.workflow_dir, "rules", "orfs.smk")
include: os.path.join(workflow.workflow_dir, "rules", "gtdb.smk")
include: os.path.join(workflow.workflow_dir, "rules", "rrna16s.smk")
include: os.path.join(workflow.workflow_dir, "rules", "mimag.smk")
include: os.path.join(workflow.workflow_dir, "rules", "summary.smk")
include: os.path.join(workflow.workflow_dir, "rules", "report.smk")
